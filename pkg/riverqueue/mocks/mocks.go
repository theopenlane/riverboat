// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgxpool"
	"github.com/riverqueue/river"
	"github.com/riverqueue/river/rivertype"
	mock "github.com/stretchr/testify/mock"
)

// NewMockJobClient creates a new instance of MockJobClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJobClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJobClient {
	mock := &MockJobClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockJobClient is an autogenerated mock type for the JobClient type
type MockJobClient struct {
	mock.Mock
}

type MockJobClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJobClient) EXPECT() *MockJobClient_Expecter {
	return &MockJobClient_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockJobClient
func (_mock *MockJobClient) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockJobClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockJobClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockJobClient_Expecter) Close() *MockJobClient_Close_Call {
	return &MockJobClient_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockJobClient_Close_Call) Run(run func()) *MockJobClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJobClient_Close_Call) Return(err error) *MockJobClient_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockJobClient_Close_Call) RunAndReturn(run func() error) *MockJobClient_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetPool provides a mock function for the type MockJobClient
func (_mock *MockJobClient) GetPool() *pgxpool.Pool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPool")
	}

	var r0 *pgxpool.Pool
	if returnFunc, ok := ret.Get(0).(func() *pgxpool.Pool); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pgxpool.Pool)
		}
	}
	return r0
}

// MockJobClient_GetPool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPool'
type MockJobClient_GetPool_Call struct {
	*mock.Call
}

// GetPool is a helper method to define mock.On call
func (_e *MockJobClient_Expecter) GetPool() *MockJobClient_GetPool_Call {
	return &MockJobClient_GetPool_Call{Call: _e.mock.On("GetPool")}
}

func (_c *MockJobClient_GetPool_Call) Run(run func()) *MockJobClient_GetPool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJobClient_GetPool_Call) Return(pool *pgxpool.Pool) *MockJobClient_GetPool_Call {
	_c.Call.Return(pool)
	return _c
}

func (_c *MockJobClient_GetPool_Call) RunAndReturn(run func() *pgxpool.Pool) *MockJobClient_GetPool_Call {
	_c.Call.Return(run)
	return _c
}

// GetRiverClient provides a mock function for the type MockJobClient
func (_mock *MockJobClient) GetRiverClient() *river.Client[pgx.Tx] {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRiverClient")
	}

	var r0 *river.Client[pgx.Tx]
	if returnFunc, ok := ret.Get(0).(func() *river.Client[pgx.Tx]); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*river.Client[pgx.Tx])
		}
	}
	return r0
}

// MockJobClient_GetRiverClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRiverClient'
type MockJobClient_GetRiverClient_Call struct {
	*mock.Call
}

// GetRiverClient is a helper method to define mock.On call
func (_e *MockJobClient_Expecter) GetRiverClient() *MockJobClient_GetRiverClient_Call {
	return &MockJobClient_GetRiverClient_Call{Call: _e.mock.On("GetRiverClient")}
}

func (_c *MockJobClient_GetRiverClient_Call) Run(run func()) *MockJobClient_GetRiverClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJobClient_GetRiverClient_Call) Return(client *river.Client[pgx.Tx]) *MockJobClient_GetRiverClient_Call {
	_c.Call.Return(client)
	return _c
}

func (_c *MockJobClient_GetRiverClient_Call) RunAndReturn(run func() *river.Client[pgx.Tx]) *MockJobClient_GetRiverClient_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function for the type MockJobClient
func (_mock *MockJobClient) Insert(ctx context.Context, args river.JobArgs, opts *river.InsertOpts) (*rivertype.JobInsertResult, error) {
	ret := _mock.Called(ctx, args, opts)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 *rivertype.JobInsertResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, river.JobArgs, *river.InsertOpts) (*rivertype.JobInsertResult, error)); ok {
		return returnFunc(ctx, args, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, river.JobArgs, *river.InsertOpts) *rivertype.JobInsertResult); ok {
		r0 = returnFunc(ctx, args, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rivertype.JobInsertResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, river.JobArgs, *river.InsertOpts) error); ok {
		r1 = returnFunc(ctx, args, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJobClient_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockJobClient_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - ctx context.Context
//   - args river.JobArgs
//   - opts *river.InsertOpts
func (_e *MockJobClient_Expecter) Insert(ctx interface{}, args interface{}, opts interface{}) *MockJobClient_Insert_Call {
	return &MockJobClient_Insert_Call{Call: _e.mock.On("Insert", ctx, args, opts)}
}

func (_c *MockJobClient_Insert_Call) Run(run func(ctx context.Context, args river.JobArgs, opts *river.InsertOpts)) *MockJobClient_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 river.JobArgs
		if args[1] != nil {
			arg1 = args[1].(river.JobArgs)
		}
		var arg2 *river.InsertOpts
		if args[2] != nil {
			arg2 = args[2].(*river.InsertOpts)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockJobClient_Insert_Call) Return(jobInsertResult *rivertype.JobInsertResult, err error) *MockJobClient_Insert_Call {
	_c.Call.Return(jobInsertResult, err)
	return _c
}

func (_c *MockJobClient_Insert_Call) RunAndReturn(run func(ctx context.Context, args river.JobArgs, opts *river.InsertOpts) (*rivertype.JobInsertResult, error)) *MockJobClient_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// InsertMany provides a mock function for the type MockJobClient
func (_mock *MockJobClient) InsertMany(ctx context.Context, params []river.InsertManyParams) ([]*rivertype.JobInsertResult, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for InsertMany")
	}

	var r0 []*rivertype.JobInsertResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []river.InsertManyParams) ([]*rivertype.JobInsertResult, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []river.InsertManyParams) []*rivertype.JobInsertResult); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*rivertype.JobInsertResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []river.InsertManyParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJobClient_InsertMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertMany'
type MockJobClient_InsertMany_Call struct {
	*mock.Call
}

// InsertMany is a helper method to define mock.On call
//   - ctx context.Context
//   - params []river.InsertManyParams
func (_e *MockJobClient_Expecter) InsertMany(ctx interface{}, params interface{}) *MockJobClient_InsertMany_Call {
	return &MockJobClient_InsertMany_Call{Call: _e.mock.On("InsertMany", ctx, params)}
}

func (_c *MockJobClient_InsertMany_Call) Run(run func(ctx context.Context, params []river.InsertManyParams)) *MockJobClient_InsertMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []river.InsertManyParams
		if args[1] != nil {
			arg1 = args[1].([]river.InsertManyParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockJobClient_InsertMany_Call) Return(jobInsertResults []*rivertype.JobInsertResult, err error) *MockJobClient_InsertMany_Call {
	_c.Call.Return(jobInsertResults, err)
	return _c
}

func (_c *MockJobClient_InsertMany_Call) RunAndReturn(run func(ctx context.Context, params []river.InsertManyParams) ([]*rivertype.JobInsertResult, error)) *MockJobClient_InsertMany_Call {
	_c.Call.Return(run)
	return _c
}

// InsertManyFast provides a mock function for the type MockJobClient
func (_mock *MockJobClient) InsertManyFast(ctx context.Context, params []river.InsertManyParams) (int, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for InsertManyFast")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []river.InsertManyParams) (int, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []river.InsertManyParams) int); ok {
		r0 = returnFunc(ctx, params)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []river.InsertManyParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJobClient_InsertManyFast_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertManyFast'
type MockJobClient_InsertManyFast_Call struct {
	*mock.Call
}

// InsertManyFast is a helper method to define mock.On call
//   - ctx context.Context
//   - params []river.InsertManyParams
func (_e *MockJobClient_Expecter) InsertManyFast(ctx interface{}, params interface{}) *MockJobClient_InsertManyFast_Call {
	return &MockJobClient_InsertManyFast_Call{Call: _e.mock.On("InsertManyFast", ctx, params)}
}

func (_c *MockJobClient_InsertManyFast_Call) Run(run func(ctx context.Context, params []river.InsertManyParams)) *MockJobClient_InsertManyFast_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []river.InsertManyParams
		if args[1] != nil {
			arg1 = args[1].([]river.InsertManyParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockJobClient_InsertManyFast_Call) Return(n int, err error) *MockJobClient_InsertManyFast_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockJobClient_InsertManyFast_Call) RunAndReturn(run func(ctx context.Context, params []river.InsertManyParams) (int, error)) *MockJobClient_InsertManyFast_Call {
	_c.Call.Return(run)
	return _c
}

// InsertManyFastTx provides a mock function for the type MockJobClient
func (_mock *MockJobClient) InsertManyFastTx(ctx context.Context, tx pgx.Tx, params []river.InsertManyParams) (int, error) {
	ret := _mock.Called(ctx, tx, params)

	if len(ret) == 0 {
		panic("no return value specified for InsertManyFastTx")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, pgx.Tx, []river.InsertManyParams) (int, error)); ok {
		return returnFunc(ctx, tx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, pgx.Tx, []river.InsertManyParams) int); ok {
		r0 = returnFunc(ctx, tx, params)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, pgx.Tx, []river.InsertManyParams) error); ok {
		r1 = returnFunc(ctx, tx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJobClient_InsertManyFastTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertManyFastTx'
type MockJobClient_InsertManyFastTx_Call struct {
	*mock.Call
}

// InsertManyFastTx is a helper method to define mock.On call
//   - ctx context.Context
//   - tx pgx.Tx
//   - params []river.InsertManyParams
func (_e *MockJobClient_Expecter) InsertManyFastTx(ctx interface{}, tx interface{}, params interface{}) *MockJobClient_InsertManyFastTx_Call {
	return &MockJobClient_InsertManyFastTx_Call{Call: _e.mock.On("InsertManyFastTx", ctx, tx, params)}
}

func (_c *MockJobClient_InsertManyFastTx_Call) Run(run func(ctx context.Context, tx pgx.Tx, params []river.InsertManyParams)) *MockJobClient_InsertManyFastTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 pgx.Tx
		if args[1] != nil {
			arg1 = args[1].(pgx.Tx)
		}
		var arg2 []river.InsertManyParams
		if args[2] != nil {
			arg2 = args[2].([]river.InsertManyParams)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockJobClient_InsertManyFastTx_Call) Return(n int, err error) *MockJobClient_InsertManyFastTx_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockJobClient_InsertManyFastTx_Call) RunAndReturn(run func(ctx context.Context, tx pgx.Tx, params []river.InsertManyParams) (int, error)) *MockJobClient_InsertManyFastTx_Call {
	_c.Call.Return(run)
	return _c
}

// InsertManyTx provides a mock function for the type MockJobClient
func (_mock *MockJobClient) InsertManyTx(ctx context.Context, tx pgx.Tx, params []river.InsertManyParams) ([]*rivertype.JobInsertResult, error) {
	ret := _mock.Called(ctx, tx, params)

	if len(ret) == 0 {
		panic("no return value specified for InsertManyTx")
	}

	var r0 []*rivertype.JobInsertResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, pgx.Tx, []river.InsertManyParams) ([]*rivertype.JobInsertResult, error)); ok {
		return returnFunc(ctx, tx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, pgx.Tx, []river.InsertManyParams) []*rivertype.JobInsertResult); ok {
		r0 = returnFunc(ctx, tx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*rivertype.JobInsertResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, pgx.Tx, []river.InsertManyParams) error); ok {
		r1 = returnFunc(ctx, tx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJobClient_InsertManyTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertManyTx'
type MockJobClient_InsertManyTx_Call struct {
	*mock.Call
}

// InsertManyTx is a helper method to define mock.On call
//   - ctx context.Context
//   - tx pgx.Tx
//   - params []river.InsertManyParams
func (_e *MockJobClient_Expecter) InsertManyTx(ctx interface{}, tx interface{}, params interface{}) *MockJobClient_InsertManyTx_Call {
	return &MockJobClient_InsertManyTx_Call{Call: _e.mock.On("InsertManyTx", ctx, tx, params)}
}

func (_c *MockJobClient_InsertManyTx_Call) Run(run func(ctx context.Context, tx pgx.Tx, params []river.InsertManyParams)) *MockJobClient_InsertManyTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 pgx.Tx
		if args[1] != nil {
			arg1 = args[1].(pgx.Tx)
		}
		var arg2 []river.InsertManyParams
		if args[2] != nil {
			arg2 = args[2].([]river.InsertManyParams)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockJobClient_InsertManyTx_Call) Return(jobInsertResults []*rivertype.JobInsertResult, err error) *MockJobClient_InsertManyTx_Call {
	_c.Call.Return(jobInsertResults, err)
	return _c
}

func (_c *MockJobClient_InsertManyTx_Call) RunAndReturn(run func(ctx context.Context, tx pgx.Tx, params []river.InsertManyParams) ([]*rivertype.JobInsertResult, error)) *MockJobClient_InsertManyTx_Call {
	_c.Call.Return(run)
	return _c
}

// InsertTx provides a mock function for the type MockJobClient
func (_mock *MockJobClient) InsertTx(ctx context.Context, tx pgx.Tx, args river.JobArgs, opts *river.InsertOpts) (*rivertype.JobInsertResult, error) {
	ret := _mock.Called(ctx, tx, args, opts)

	if len(ret) == 0 {
		panic("no return value specified for InsertTx")
	}

	var r0 *rivertype.JobInsertResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, pgx.Tx, river.JobArgs, *river.InsertOpts) (*rivertype.JobInsertResult, error)); ok {
		return returnFunc(ctx, tx, args, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, pgx.Tx, river.JobArgs, *river.InsertOpts) *rivertype.JobInsertResult); ok {
		r0 = returnFunc(ctx, tx, args, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rivertype.JobInsertResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, pgx.Tx, river.JobArgs, *river.InsertOpts) error); ok {
		r1 = returnFunc(ctx, tx, args, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJobClient_InsertTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertTx'
type MockJobClient_InsertTx_Call struct {
	*mock.Call
}

// InsertTx is a helper method to define mock.On call
//   - ctx context.Context
//   - tx pgx.Tx
//   - args river.JobArgs
//   - opts *river.InsertOpts
func (_e *MockJobClient_Expecter) InsertTx(ctx interface{}, tx interface{}, args interface{}, opts interface{}) *MockJobClient_InsertTx_Call {
	return &MockJobClient_InsertTx_Call{Call: _e.mock.On("InsertTx", ctx, tx, args, opts)}
}

func (_c *MockJobClient_InsertTx_Call) Run(run func(ctx context.Context, tx pgx.Tx, args river.JobArgs, opts *river.InsertOpts)) *MockJobClient_InsertTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 pgx.Tx
		if args[1] != nil {
			arg1 = args[1].(pgx.Tx)
		}
		var arg2 river.JobArgs
		if args[2] != nil {
			arg2 = args[2].(river.JobArgs)
		}
		var arg3 *river.InsertOpts
		if args[3] != nil {
			arg3 = args[3].(*river.InsertOpts)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockJobClient_InsertTx_Call) Return(jobInsertResult *rivertype.JobInsertResult, err error) *MockJobClient_InsertTx_Call {
	_c.Call.Return(jobInsertResult, err)
	return _c
}

func (_c *MockJobClient_InsertTx_Call) RunAndReturn(run func(ctx context.Context, tx pgx.Tx, args river.JobArgs, opts *river.InsertOpts) (*rivertype.JobInsertResult, error)) *MockJobClient_InsertTx_Call {
	_c.Call.Return(run)
	return _c
}

// JobCancel provides a mock function for the type MockJobClient
func (_mock *MockJobClient) JobCancel(ctx context.Context, jobID int64) (*rivertype.JobRow, error) {
	ret := _mock.Called(ctx, jobID)

	if len(ret) == 0 {
		panic("no return value specified for JobCancel")
	}

	var r0 *rivertype.JobRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (*rivertype.JobRow, error)); ok {
		return returnFunc(ctx, jobID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) *rivertype.JobRow); ok {
		r0 = returnFunc(ctx, jobID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rivertype.JobRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, jobID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJobClient_JobCancel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JobCancel'
type MockJobClient_JobCancel_Call struct {
	*mock.Call
}

// JobCancel is a helper method to define mock.On call
//   - ctx context.Context
//   - jobID int64
func (_e *MockJobClient_Expecter) JobCancel(ctx interface{}, jobID interface{}) *MockJobClient_JobCancel_Call {
	return &MockJobClient_JobCancel_Call{Call: _e.mock.On("JobCancel", ctx, jobID)}
}

func (_c *MockJobClient_JobCancel_Call) Run(run func(ctx context.Context, jobID int64)) *MockJobClient_JobCancel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockJobClient_JobCancel_Call) Return(jobRow *rivertype.JobRow, err error) *MockJobClient_JobCancel_Call {
	_c.Call.Return(jobRow, err)
	return _c
}

func (_c *MockJobClient_JobCancel_Call) RunAndReturn(run func(ctx context.Context, jobID int64) (*rivertype.JobRow, error)) *MockJobClient_JobCancel_Call {
	_c.Call.Return(run)
	return _c
}

// JobCancelTx provides a mock function for the type MockJobClient
func (_mock *MockJobClient) JobCancelTx(ctx context.Context, tx pgx.Tx, jobID int64) (*rivertype.JobRow, error) {
	ret := _mock.Called(ctx, tx, jobID)

	if len(ret) == 0 {
		panic("no return value specified for JobCancelTx")
	}

	var r0 *rivertype.JobRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, pgx.Tx, int64) (*rivertype.JobRow, error)); ok {
		return returnFunc(ctx, tx, jobID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, pgx.Tx, int64) *rivertype.JobRow); ok {
		r0 = returnFunc(ctx, tx, jobID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rivertype.JobRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, pgx.Tx, int64) error); ok {
		r1 = returnFunc(ctx, tx, jobID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJobClient_JobCancelTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JobCancelTx'
type MockJobClient_JobCancelTx_Call struct {
	*mock.Call
}

// JobCancelTx is a helper method to define mock.On call
//   - ctx context.Context
//   - tx pgx.Tx
//   - jobID int64
func (_e *MockJobClient_Expecter) JobCancelTx(ctx interface{}, tx interface{}, jobID interface{}) *MockJobClient_JobCancelTx_Call {
	return &MockJobClient_JobCancelTx_Call{Call: _e.mock.On("JobCancelTx", ctx, tx, jobID)}
}

func (_c *MockJobClient_JobCancelTx_Call) Run(run func(ctx context.Context, tx pgx.Tx, jobID int64)) *MockJobClient_JobCancelTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 pgx.Tx
		if args[1] != nil {
			arg1 = args[1].(pgx.Tx)
		}
		var arg2 int64
		if args[2] != nil {
			arg2 = args[2].(int64)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockJobClient_JobCancelTx_Call) Return(jobRow *rivertype.JobRow, err error) *MockJobClient_JobCancelTx_Call {
	_c.Call.Return(jobRow, err)
	return _c
}

func (_c *MockJobClient_JobCancelTx_Call) RunAndReturn(run func(ctx context.Context, tx pgx.Tx, jobID int64) (*rivertype.JobRow, error)) *MockJobClient_JobCancelTx_Call {
	_c.Call.Return(run)
	return _c
}

// TruncateRiverTables provides a mock function for the type MockJobClient
func (_mock *MockJobClient) TruncateRiverTables(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TruncateRiverTables")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockJobClient_TruncateRiverTables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TruncateRiverTables'
type MockJobClient_TruncateRiverTables_Call struct {
	*mock.Call
}

// TruncateRiverTables is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockJobClient_Expecter) TruncateRiverTables(ctx interface{}) *MockJobClient_TruncateRiverTables_Call {
	return &MockJobClient_TruncateRiverTables_Call{Call: _e.mock.On("TruncateRiverTables", ctx)}
}

func (_c *MockJobClient_TruncateRiverTables_Call) Run(run func(ctx context.Context)) *MockJobClient_TruncateRiverTables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockJobClient_TruncateRiverTables_Call) Return(err error) *MockJobClient_TruncateRiverTables_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockJobClient_TruncateRiverTables_Call) RunAndReturn(run func(ctx context.Context) error) *MockJobClient_TruncateRiverTables_Call {
	_c.Call.Return(run)
	return _c
}
